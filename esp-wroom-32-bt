#include <BluetoothSerial.h>
#include <BTAddress.h>
#include <unordered_map>

#define LED_1 2
#define SCAN_DEV_MAX 2

std::unordered_map<uint16_t, const char*> service_map = {
  {1, "Limited Discoverable Mode"},
  {2, "(Reserved)"},
  {4, "(Reserved)"},
  {8, "Positioning (Location identification)"},
  {16, "Networking (AN, Ad hoc, ...)"},
  {32, "Rendering (Printing, Speaker, ...)"},
  {64, "Capturing (Scanner, Microphone, ...)"},
  {128, "Object Transfer (v-Inbox, v-Folder, ...)"},
  {256, "Audio (Speaker, Microphone, Headset Service, ...)"},
  {512, "Telephony (Cordless Telephony, Modem, Headset Service, ...)"},
  {1024, "Information (WEB-Server, WAP-Server, ...)"}
};

std::unordered_map<uint16_t, const char*> imaging_minor_class_map = {
  {1, "Display"},
  {2, "Camera"},
  {4, "Scanner"},
  {8, "Printer"},
};

//void printBinary(uint32_t value, int bits) {
//  Serial.print("BINARY: ");
//  for (int i = bits - 1; i >= 0; --i) {
//    Serial.print((value & (1 << i)) ? '1' : '0');
//  }
//  Serial.println();
//}

struct Device {
  BTAddress address;
  String name;
  int rssi;
  uint32_t class_of_device;
  String detailed_cod;

  Device() {
    rssi = 0;
    class_of_device = 0;
  }

  Device(const BTAddress &addr, const String &n, int signalStrength, uint32_t cod) {
    address = addr;
    name = n;
    rssi = signalStrength;
    class_of_device = cod;
    generateDetailedCOD();
  }

  void generateDetailedCOD() {
    //Serial.printf("24 bits cod: %06X\n", class_of_device & 0x00FFFFFF);
    uint8_t format = class_of_device & 0x03;
    //Serial.printf("format: %06X\n", format);
    //printBinary(format,2);
    uint8_t minor_device_class = (class_of_device >> 2) & 0x3F;
    //Serial.printf("minor device class: %06X\n", minor_device_class);
    //printBinary(minor_device_class,6);
    uint8_t major_device_class = (class_of_device >> 8) & 0x1F;
    //Serial.printf("major device class: %06X\n", major_device_class);
    //printBinary(major_device_class,5);
    uint16_t major_service_class = (class_of_device >> 13) & 0x7FF;
    //Serial.printf("major service class: %06X\n", major_service_class);
    //printBinary(major_service_class,11);
    if(format!=0) { detailed_cod = detailed_cod + "Non recognised format\n"; }
    else { detailed_cod = detailed_cod + "Format: 00\n";
      detailed_cod = detailed_cod + "MAJOR Service Class:\n";

      for (const auto& entry : service_map) {
        if (major_service_class & entry.first) detailed_cod = detailed_cod + " - " + entry.second + "\n";
      }

      switch (major_device_class) {
        case 0:
          detailed_cod = detailed_cod + "MAJOR Device Class: Miscelaneous\n";
          detailed_cod = detailed_cod + "minor Device Class: Miscelaneous\n";
          break;
        case 1:
          detailed_cod = detailed_cod + "MAJOR Device Class: Computer (desktop, notebook, PDA, organizers, ...)\n";
          switch (minor_device_class) {
            case 0:
              detailed_cod = detailed_cod + "minor Device Class: Uncategorized, code for device not assigned\n";
              break;
            case 1:
              detailed_cod = detailed_cod + "minor Device Class: Desktop Workstation\n";
              break;
            case 2:
              detailed_cod = detailed_cod + "minor Device Class: Server-Class Computer\n";
              break;
            case 3:
              detailed_cod = detailed_cod + "minor Device Class: Laptop\n";
              break;
            case 4:
              detailed_cod = detailed_cod + "minor Device Class: Handheld PC/PDA (clam shell)\n";
              break;
            case 5:
              detailed_cod = detailed_cod + "minor Device Class: Palm-sized PC/PDA\n";
              break;
            case 6:
              detailed_cod = detailed_cod + "minor Device Class: Wearable Computer (watch sized)\n";
              break;
            default:
              detailed_cod = detailed_cod + "minor Device Class: ERROR -> Reserved value\n";
              break;
          }
          break;
        case 2:
          detailed_cod = detailed_cod + "MAJOR Device Class: Phone (cellular, cordless, payphone, modem, ...)\n";
          switch (minor_device_class) {
            case 0:
              detailed_cod = detailed_cod + "minor Device Class: Uncategorized, code for device not assigned\n";
              break;
            case 1:
              detailed_cod = detailed_cod + "minor Device Class: Cellular\n";
              break;
            case 2:
              detailed_cod = detailed_cod + "minor Device Class: Cordless\n";
              break;
            case 3:
              detailed_cod = detailed_cod + "minor Device Class: Smart Phone\n";
              break;
            case 4:
              detailed_cod = detailed_cod + "minor Device Class: Wired Modem or Voice Gateway\n";
              break;
            case 5:
              detailed_cod = detailed_cod + "minor Device Class: Common ISDN Access\n";
              break;
            default:
              detailed_cod = detailed_cod + "minor Device Class: ERROR -> Reserved value\n";
              break;
          }
          break;
        case 3:
          detailed_cod = detailed_cod + "MAJOR Device Class: LAN/Network Access Point\n";
          switch (minor_device_class >> 3) {
            case 0:
              detailed_cod = detailed_cod + "minor Device Class: Fully available\n";
              break;
            case 1:
              detailed_cod = detailed_cod + "minor Device Class: 1%% - 17%% utilized\n";
              break;
            case 2:
              detailed_cod = detailed_cod + "minor Device Class: 17%% - 33%% utilized\n";
              break;
            case 3:
              detailed_cod = detailed_cod + "minor Device Class: 33%% - 50%% utilized\n";
              break;
            case 4:
              detailed_cod = detailed_cod + "minor Device Class: 50%% - 67%% utilized\n";
              break;
            case 5:
              detailed_cod = detailed_cod + "minor Device Class: 67%% - 83%% utilized\n";
              break;
            case 6:
              detailed_cod = detailed_cod + "minor Device Class: 83%% - 99%% utilized\n";
              break;
            case 7:
              detailed_cod = detailed_cod + "minor Device Class: No service available\n";
              break;
            default:
              detailed_cod = detailed_cod + "minor Device Class: ERROR -> Reserved value\n";
              break;
          }
          break;
        case 4:
          detailed_cod = detailed_cod + "MAJOR Device Class: Audio/Video (headset, speaker, stereo, video display, vcr, ...)\n";
          switch (minor_device_class) {
            case 0:
              detailed_cod = detailed_cod + "minor Device Class: Uncategorized, code not assigned\n";
              break;
            case 1:
              detailed_cod = detailed_cod + "minor Device Class: Wearable Headset Device\n";
              break;
            case 2:
              detailed_cod = detailed_cod + "minor Device Class: Hands-Free Device\n";
              break;
            case 3:
              detailed_cod = detailed_cod + "minor Device Class: (Reserved)\n";
              break;
            case 4:
              detailed_cod = detailed_cod + "minor Device Class: Microphone\n";
              break;
            case 5:
              detailed_cod = detailed_cod + "minor Device Class: Loudspeaker\n";
              break;
            case 6:
              detailed_cod = detailed_cod + "minor Device Class: Headphones\n";
              break;
            case 7:
              detailed_cod = detailed_cod + "minor Device Class: Portable Audio\n";
              break;
            case 8:
              detailed_cod = detailed_cod + "minor Device Class: Car Audio\n";
              break;
            case 9:
              detailed_cod = detailed_cod + "minor Device Class: Set-Top Box\n";
              break;
            case 10:
              detailed_cod = detailed_cod + "minor Device Class: HiFi Audio Device\n";
              break;
            case 11:
              detailed_cod = detailed_cod + "minor Device Class: VCR\n";
              break;
            case 12:
              detailed_cod = detailed_cod + "minor Device Class: Video Camera\n";
              break;
            case 13:
              detailed_cod = detailed_cod + "minor Device Class: Camcorder\n";
              break;
            case 14:
              detailed_cod = detailed_cod + "minor Device Class: Video Monitor\n";
              break;
            case 15:
              detailed_cod = detailed_cod + "minor Device Class: Video Display and Loudspeaker\n";
              break;
            case 16:
              detailed_cod = detailed_cod + "minor Device Class: Video Conferencing\n";
              break;
            case 17:
              detailed_cod = detailed_cod + "minor Device Class: (Reserved)\n";
              break;
            case 18:
              detailed_cod = detailed_cod + "minor Device Class: Gaming/Toy\n";
              break;
            default:
              detailed_cod = detailed_cod + "minor Device Class: ERROR -> Reserved value\n";
              break;
          }
          break;
        case 5:
          detailed_cod = detailed_cod + "MAJOR Device Class: Peripheral (mouse, joystick, keyboards, ...)\n";
          switch (minor_device_class >> 4) {
            case 0:
              detailed_cod = detailed_cod + "minor Device Class 1: Not Keyboard/Not Pointing Device\n";
              break;
            case 1:
              detailed_cod = detailed_cod + "minor Device Class 1: Keyboard\n";
              break;
            case 2:
              detailed_cod = detailed_cod + "minor Device Class 1: Pointing Device\n";
              break;
            case 3:
              detailed_cod = detailed_cod + "minor Device Class 1: Combo Keyboard/Pointing Device\n";
              break;
            default:
              detailed_cod = detailed_cod + "minor Device Class 1: ERROR -> Reserved value\n";
              break;
          }
          switch (minor_device_class & 0x0F) {
            case 0:
              detailed_cod = detailed_cod + "minor Device Class 2: Uncategorized Device\n";
              break;
            case 1:
              detailed_cod = detailed_cod + "minor Device Class 2: Joystick\n";
              break;
            case 2:
              detailed_cod = detailed_cod + "minor Device Class 2: Gamepad\n";
              break;
            case 3:
              detailed_cod = detailed_cod + "minor Device Class 2: Remote Control\n";
              break;
            case 4:
              detailed_cod = detailed_cod + "minor Device Class 2: Sensing Device\n";
              break;
            case 5:
              detailed_cod = detailed_cod + "minor Device Class 2: Digitizer Tablet\n";
              break;
            case 6:
              detailed_cod = detailed_cod + "minor Device Class 2: Card Reader (e.g. SIM Card Reader)\n";
              break;
            default:
              detailed_cod = detailed_cod + "minor Device Class: ERROR -> Reserved value\n";
              break;
          }
          break;
        case 6:
          detailed_cod = detailed_cod + "MAJOR Device Class: Imaging (printing, scanner, camera, display, ...)\n";
          detailed_cod = detailed_cod + "minor Device Class:\n";

          for (const auto& entry : imaging_minor_class_map) {
            if ((minor_device_class >> 2) & entry.first) detailed_cod = detailed_cod + " - " + entry.second + "\n";
          }
          break;
        case 7:
          detailed_cod = detailed_cod + "MAJOR Device Class: Wearable\n";
          switch (minor_device_class) {
            case 1:
              detailed_cod = detailed_cod + "minor Device Class: Wrist Watch\n";
              break;
            case 2:
              detailed_cod = detailed_cod + "minor Device Class: Pager\n";
              break;
            case 3:
              detailed_cod = detailed_cod + "minor Device Class: Jacket\n";
              break;
            case 4:
              detailed_cod = detailed_cod + "minor Device Class: Helmet\n";
              break;
            case 5:
              detailed_cod = detailed_cod + "minor Device Class: Glasses\n";
              break;
            default:
              detailed_cod = detailed_cod + "minor Device Class: ERROR -> Reserved value\n";
              break;
          }
          break;
        case 8:
          detailed_cod = detailed_cod + "MAJOR Device Class: Toy\n";
          switch (minor_device_class) {
            case 1:
              detailed_cod = detailed_cod + "minor Device Class: Robot\n";
              break;
            case 2:
              detailed_cod = detailed_cod + "minor Device Class: Vehicle\n";
              break;
            case 3:
              detailed_cod = detailed_cod + "minor Device Class: Doll/Action Figure\n";
              break;
            case 4:
              detailed_cod = detailed_cod + "minor Device Class: Controller\n";
              break;
            case 5:
              detailed_cod = detailed_cod + "minor Device Class: Game\n";
              break;
            default:
              detailed_cod = detailed_cod + "minor Device Class: ERROR -> Reserved value\n";
              break;
          }
          break;
        case 9:
          detailed_cod = detailed_cod + "MAJOR Device Class: Health\n";
          switch (minor_device_class) {
            case 0:
              detailed_cod = detailed_cod + "minor Device Class: Undefined\n";
              break;
            case 1:
              detailed_cod = detailed_cod + "minor Device Class: Blood Pressure Monitor\n";
              break;
            case 2:
              detailed_cod = detailed_cod + "minor Device Class: Thermometer\n";
              break;
            case 3:
              detailed_cod = detailed_cod + "minor Device Class: Weighing Scale\n";
              break;
            case 4:
              detailed_cod = detailed_cod + "minor Device Class: Glucose Meter\n";
              break;
            case 5:
              detailed_cod = detailed_cod + "minor Device Class: Pulse Oximeter\n";
              break;
            case 6:
              detailed_cod = detailed_cod + "minor Device Class: Heart/Pulse Rate Monitor\n";
              break;
            case 7:
              detailed_cod = detailed_cod + "minor Device Class: Health Data Display\n";
              break;
            default:
              detailed_cod = detailed_cod + "minor Device Class: ERROR -> Reserved value\n";
              break;
          }
          break;
        case 31:
          detailed_cod = detailed_cod + "MAJOR Device Class: Uncategorized, specific device code not specified\n";
          break;
        default:
          detailed_cod = detailed_cod + "MAJOR Device Class: ERROR -> Reserved value\n";
          break;
      }
    }
  }

};

int light_mode = 1;
int found = 0;

BluetoothSerial SerialBT;
Device found_devices[SCAN_DEV_MAX];

void lights() {
  if(light_mode==1) {
    digitalWrite(LED_1, LOW);
    digitalWrite(LED_1, HIGH);
    delay(250);

    digitalWrite(LED_1, HIGH);
    digitalWrite(LED_1, LOW);
    delay(1250);
  } else if(light_mode==2) {
    digitalWrite(LED_1, LOW);
    digitalWrite(LED_1, HIGH);
    delay(100);

    digitalWrite(LED_1, HIGH);
    digitalWrite(LED_1, LOW);
    delay(100);
  }
}

void onAdvertisedDevice(BTAdvertisedDevice* pAdvertisedDevice) {
  found_devices[found].address = pAdvertisedDevice->getAddress();
  found_devices[found].name = String(pAdvertisedDevice->getName().c_str());
  found_devices[found].rssi = pAdvertisedDevice->getRSSI();
  found_devices[found].class_of_device = pAdvertisedDevice->getCOD() & 0xFFFFFF;
  found_devices[found].generateDetailedCOD();

  found++;
  Serial.println("+1");

  if (found >= SCAN_DEV_MAX) {
    for (int i=0; i < SCAN_DEV_MAX; i++) {
      if (i==0) Serial.println("------------------------------------");
      Serial.print("# ");
      Serial.print(i + 1);
      Serial.print(": ");
      Serial.println(found_devices[i].address.toString().c_str());
      Serial.print("Name: ");
      Serial.println(found_devices[i].name);
      Serial.print("RSSI: ");
      Serial.println(found_devices[i].rssi);
      Serial.printf("Class of device: %06X \n",found_devices[i].class_of_device);
      Serial.print(found_devices[i].detailed_cod);
      Serial.println("------------------------------------");
    }

    Serial.println("Scan finished.");
    SerialBT.discoverAsyncStop();
    light_mode = 1;
  }
  
}

void setup() {
  Serial.begin(9600);
  SerialBT.begin("ESP32");

  pinMode(LED_1, OUTPUT);

  if (SerialBT.discoverAsync(onAdvertisedDevice)) {
    Serial.println("\nScanning BT devices.");
    light_mode = 2;
  } else {
    light_mode = 1;
    Serial.println("Scan error.");
  }
}

void loop() {
  lights();
}
